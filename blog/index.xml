<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on moench.dev</title>
    <link>https://mrmonk.dev/blog/</link>
    <description>Recent content in Blogs on moench.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© {year}</copyright>
    <lastBuildDate>Fri, 01 Apr 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mrmonk.dev/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>throwAway.js</title>
      <link>https://mrmonk.dev/blog/projects/microtools/throw-away-js/</link>
      <pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mrmonk.dev/blog/projects/microtools/throw-away-js/</guid>
      <description>background Evertime I have to share secrets, notes with other parties which are not in my company, I have to think about how to do it. Secret stores are sometimes not feasable or simple to use. I dont trust some shady sites were you can exaktly do that.
So I though how would I do it? I liked the idea of client side encrpytion and using the backend as &amp;ldquo;dump&amp;rdquo; datastore which will and cannot interfer into the whole prozess of encryption.</description>
    </item>
    
    <item>
      <title>a season calendar for fermentation nerds</title>
      <link>https://mrmonk.dev/blog/projects/microtools/fermentation-calendar/</link>
      <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mrmonk.dev/blog/projects/microtools/fermentation-calendar/</guid>
      <description>season and fermentation calendar I&amp;rsquo;m quite excited about fermentation from time to time. My main issue is that most of the time I&amp;rsquo;m not aware of which fruits and vegetables have season. So to have this list always with me I build up a small site to have this informations always ready. Small but usefull feature set:
 You can search Multilanguage &amp;amp; Multiregion (at least in theory) Data can easily be extended  the data and technology I pulled the data from various sources and wrote them together (a typical nighttime task).</description>
    </item>
    
    <item>
      <title>build a command line java switch</title>
      <link>https://mrmonk.dev/blog/notes/terminal/java-switch-versions-commandline/</link>
      <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mrmonk.dev/blog/notes/terminal/java-switch-versions-commandline/</guid>
      <description>Add this to your ~/.zshrcafter both versions are installed:
# export JAVA_HOME=$(/usr/libexec/java_home) export JAVA_8_HOME=$(/usr/libexec/java_home -v1.8) export JAVA_11_HOME=$(/usr/libexec/java_home -v11) alias java8=&#39;export JAVA_HOME=$JAVA_8_HOME&#39; alias java11=&#39;export JAVA_HOME=$JAVA_11_HOME&#39; java8  To switch no simple execute:
# or switch to java11, default in this example is 8 java11 # ...your stuff will be executed with java11  original post - with deeper explanation</description>
    </item>
    
    <item>
      <title>zsh (better) privacy setup</title>
      <link>https://mrmonk.dev/blog/notes/terminal/zsh-privacy-setup/</link>
      <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mrmonk.dev/blog/notes/terminal/zsh-privacy-setup/</guid>
      <description>the problem Exposing the history of commandline inputs can expose sensitive informations to all programms which have access to it.
clean the history on the begining of workday (6:00) each day I like this approach because I use mutliple sessions over the day and dont want to lose commands I working with all the day. On linux you can use crontab but MacOS I will use launchd deamon.
first step: create sheduled job</description>
    </item>
    
    <item>
      <title>using generic params in typescript</title>
      <link>https://mrmonk.dev/blog/notes/typescript/ts-generic-params/</link>
      <pubDate>Fri, 07 Jan 2022 11:00:00 +0100</pubDate>
      
      <guid>https://mrmonk.dev/blog/notes/typescript/ts-generic-params/</guid>
      <description>the challenge interface MyInterface { key1: number; key2: string; }  So for example we have the following setup. We have a Typescript interface and object implementing this interface and a function we pass the object and a key, which indicates the field of the object we want to manipulate.
As goodie we also get for that is type completion in VSC. So we get suggestions deppending on the type the object hast.</description>
    </item>
    
    <item>
      <title>typing eventhandler in typescript</title>
      <link>https://mrmonk.dev/blog/notes/typescript/ts-eventhandler/</link>
      <pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mrmonk.dev/blog/notes/typescript/ts-eventhandler/</guid>
      <description>I came across this issue when I made a type definition file for the upcoming web-ble functionalities in chrome and edge browser (more about it).
the challenge The challenge is the following:
 there are n-events we can register to trough a function addEventhandler in the callback we get data back depending on the event we register to, we expect a typed callback  untyped example:
MyObject.addEventhandler(&amp;quot;eventA&amp;quot;, myCallback, options); function myCallback(event: any) { // do something here }  solution mapped types Mapping Types are great if we want determine the type based on a single key.</description>
    </item>
    
    <item>
      <title>setting up debugging with node and typescript in visual studio code</title>
      <link>https://mrmonk.dev/blog/notes/typescript/ts-debug-vsc/</link>
      <pubDate>Fri, 15 Oct 2021 19:23:49 +0100</pubDate>
      
      <guid>https://mrmonk.dev/blog/notes/typescript/ts-debug-vsc/</guid>
      <description>the problem Offical Solution from visual studio code homepage for setting up debugging:
{ &amp;quot;name&amp;quot;: &amp;quot;Launch Server&amp;quot;, &amp;quot;program&amp;quot;: &amp;quot;${workspaceFolder}/src/index.ts&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;node&amp;quot;, &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;, &amp;quot;skipFiles&amp;quot;: [&amp;quot;&amp;lt;node_internals&amp;gt;/**&amp;quot;], &amp;quot;preLaunchTask&amp;quot;: &amp;quot;tsc: build - tsconfig.json&amp;quot;, &amp;quot;outFiles&amp;quot;: [&amp;quot;${workspaceFolder}/build/**/*.js&amp;quot;] }  and add in tsconfig.json:
{ ... &amp;quot;sourceMap&amp;quot;: true, ... }  This works, but brings one problem to the front: Exceptions. The exception thrown will refrence to the compiled javascript code. So we have to lookup the causing source file by our selfs.</description>
    </item>
    
    <item>
      <title>mongo snippets: array cheatsheet</title>
      <link>https://mrmonk.dev/blog/mongo/mongo-array-cheatsheet-values/</link>
      <pubDate>Sun, 25 Apr 2021 12:00:00 +0200</pubDate>
      
      <guid>https://mrmonk.dev/blog/mongo/mongo-array-cheatsheet-values/</guid>
      <description>Cheatsheet - Array Of Values A short cheat sheet for working with arrays in mongodb queries and aggregations. Inspired by: Mongo Doc - Update Array Operator
document structure For all following examples we assume a collection named &amp;ldquo;arrays&amp;rdquo; with at least on document of the following structure:
{ &amp;quot;tags&amp;quot;: [&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;] }  create Creation is very straight forward so we will skip this part here.
query Basic query operation on elements.</description>
    </item>
    
    <item>
      <title>powerbi: handling iso weeks</title>
      <link>https://mrmonk.dev/blog/powerbi/powerbi-iso-weeks/</link>
      <pubDate>Sun, 25 Apr 2021 12:00:00 +0200</pubDate>
      
      <guid>https://mrmonk.dev/blog/powerbi/powerbi-iso-weeks/</guid>
      <description>There are some twist to keep in mind, when working with ISO calendar weeks. The first week of the year is defi
formulars formular for ISO calendar week
WEEKNUM(data[&amp;quot;timestamp&amp;quot;], 21)  Hint: The parameter 21 is not always documented for PowerBi depending on the source.
formular for ISO year
For grouping we need to know to which year a calendar week belongs. It could be that the last week lays in the new year but for aggregation purpose these week counts to the previous year.</description>
    </item>
    
    <item>
      <title>w(u)tf-8 german csv and ms excel</title>
      <link>https://mrmonk.dev/blog/notes/utf-8-bom/</link>
      <pubDate>Thu, 25 Feb 2021 12:00:00 +0100</pubDate>
      
      <guid>https://mrmonk.dev/blog/notes/utf-8-bom/</guid>
      <description>why utf-8 seems broken sometimes The programming world most of the time does not really care about characters which are special in other languages others than englisch. So in Germany we have our all time favorites ÄÖÜäüöß to take care about everytime we work with text documents.
Normally you will have no trouble with text editors, but an burning example is Microsoft Office. To correctly import an utf-8 encoded csv document (with special chars) you have to provide an BOM.</description>
    </item>
    
    <item>
      <title>arduino: how to use the serial plotter of Arduino IDE</title>
      <link>https://mrmonk.dev/blog/arduino/arduino-ide-serial-plotter/</link>
      <pubDate>Thu, 25 Feb 2021 12:00:00 +0200</pubDate>
      
      <guid>https://mrmonk.dev/blog/arduino/arduino-ide-serial-plotter/</guid>
      <description>labeling the series If you have to print some debug messages in the beginning, the Serial Plotter will interpret these as Series Labels. To clear unneacessary labels, just restart the serial plotter (not the mc). In order to catch up the labels, you have to print them to Serial everytime you print values. So it is garanted that the series labels are recognized.
As seperators you can use a tabulator, a space or a comma.</description>
    </item>
    
    <item>
      <title>mongo fixing broken timestamps</title>
      <link>https://mrmonk.dev/blog/mongo/mongo-fixing-stuff/</link>
      <pubDate>Mon, 02 Nov 2020 12:00:00 +0200</pubDate>
      
      <guid>https://mrmonk.dev/blog/mongo/mongo-fixing-stuff/</guid>
      <description>convert bson timestamp to date So I&amp;rsquo;m used to create a timestamp for logging in the db when something is created. What should go wrong with using mongo bson timestamp. Let me say it this way. As long as you leave it alone in the database it will happily coexist with all the other stuff.
But if you want to use it in javascript it gets complicated.
What is a timestamp in bson</description>
    </item>
    
    <item>
      <title>make ftp working with ssh without changing permissions</title>
      <link>https://mrmonk.dev/blog/notes/ftp-without-chmod/</link>
      <pubDate>Tue, 01 Sep 2020 12:00:00 +0200</pubDate>
      
      <guid>https://mrmonk.dev/blog/notes/ftp-without-chmod/</guid>
      <description>the problem If you want to disable your root user of the maschine being accessed via SSH you probably ran into Problems with SFTP on your server. As long you use the root user of the maschine your SFTP will work fine, but if you change your user you will get into trouble.
I&amp;rsquo;m working a lot with docker and bind mounts for config files so I can&amp;rsquo;t change the owner/permission of the directory or file I&amp;rsquo;m binding to.</description>
    </item>
    
    <item>
      <title>mongo snippets: arrays</title>
      <link>https://mrmonk.dev/blog/mongo/mongo-snippets-arrays/</link>
      <pubDate>Mon, 13 Jul 2020 19:23:49 +0200</pubDate>
      
      <guid>https://mrmonk.dev/blog/mongo/mongo-snippets-arrays/</guid>
      <description>extract only subset of embedded documents Sometimes we want to extract not all embedded documents from a matched documents. Imagine a object chatroom:
{ _id: ObjectId(&#39;5f687ba6a93aeddc476ea157&#39;), ... messages: Array&amp;lt;Messages&amp;gt; }  The messages look like this:
{ sender: Reference, send_at: Date payload: &amp;quot;&amp;quot; }  Now when we want to extract all message before, after a date we could query the Chatroom and filter it in the backend logic, or we can use Aggregation Pipeline.</description>
    </item>
    
    <item>
      <title>about: me</title>
      <link>https://mrmonk.dev/blog/about/about-me/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mrmonk.dev/blog/about/about-me/</guid>
      <description>My name is Max Mönch, I&amp;rsquo;m an engineer, founder and food and coffee nerd.
 what is this site? This is not a classical blog, I&amp;rsquo;m not writing to adress somebody. This are just toughs and projects I work on. If I did something interessting, it probably lands here to not forget it or to share it with some colleages.
my development world Stuff I work with a lot&amp;hellip; from basics to expert.</description>
    </item>
    
  </channel>
</rss>