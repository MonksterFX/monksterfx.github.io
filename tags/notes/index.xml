<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>notes on moench.dev</title>
    <link>https://mrmonk.dev/tags/notes/</link>
    <description>Recent content in notes on moench.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Â© {year}</copyright>
    <lastBuildDate>Sat, 29 Apr 2023 12:00:00 +0100</lastBuildDate>
    
	<atom:link href="https://mrmonk.dev/tags/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>typed socket.io error handler</title>
      <link>https://mrmonk.dev/blog/notes/typescript/ts-socket-io-error-handler/</link>
      <pubDate>Sat, 29 Apr 2023 12:00:00 +0100</pubDate>
      
      <guid>https://mrmonk.dev/blog/notes/typescript/ts-socket-io-error-handler/</guid>
      <description>the challenge This is a error wrapper as described here: socket.io - error handling
const errorHandler = (handler) =&amp;gt; { const handleError = (err) =&amp;gt; { console.error(&amp;quot;please handle me&amp;quot;, err); }; return (...args) =&amp;gt; { try { const ret = handler.apply(this, args); if (ret &amp;amp;&amp;amp; typeof ret.catch === &amp;quot;function&amp;quot;) { // async handler ret.catch(handleError); } } catch (e) { // sync handler handleError(e); } }; }; // server or client side socket.</description>
    </item>
    
    <item>
      <title>getting started with the Type&lt;Challenge[]&gt;</title>
      <link>https://mrmonk.dev/blog/notes/typescript/generics/ts-generics/</link>
      <pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mrmonk.dev/blog/notes/typescript/generics/ts-generics/</guid>
      <description>As I did research in the internet about some typescript topics I stumpled across this fantastic github repository. Type&amp;lt;Challenge[]&amp;gt; is an open source collection of small typescript riddles. Why you should try to solve them you might ask? Because it is fun and you learn what crazy things you can do with the type sytem. And trust me. Your colleges will love you if you can provide fully typed generic functions, because the let you develop that much faster.</description>
    </item>
    
    <item>
      <title>typescript generics series - arrays</title>
      <link>https://mrmonk.dev/blog/notes/typescript/generics/ts-generics-arrays/</link>
      <pubDate>Wed, 14 Dec 2022 12:00:00 +0100</pubDate>
      
      <guid>https://mrmonk.dev/blog/notes/typescript/generics/ts-generics-arrays/</guid>
      <description>base technics - array This collection of basic technics really helped me to get an better understanding how we can work with array types in generics. It is quite amazing what we can do if we get used to the sometimes strange syntax of types in typescript.
 Spoiler alert! This section contains some solutions of the great type-challenge.
 enumerate the array keys get all keys
This technic is helpfull if we want to convert a static runtime array into an type.</description>
    </item>
    
    <item>
      <title>typescript generics series - readonly</title>
      <link>https://mrmonk.dev/blog/notes/typescript/generics/ts-generics-readonly/</link>
      <pubDate>Tue, 13 Dec 2022 12:00:00 +0100</pubDate>
      
      <guid>https://mrmonk.dev/blog/notes/typescript/generics/ts-generics-readonly/</guid>
      <description>basic technics - readonly As you propably now, we can easily add readonly to any key of an object in typescript.
type User = { readonly id: string name: string }  But how can we do that in generics? It is quite easy but the syntax first confused me. We simply can add or substract the keyword to any key of an object.
add readonly To add readonly to all keys we just add they keyword +readonly or even shorter readonly in an property iteration.</description>
    </item>
    
    <item>
      <title>using generic params in typescript</title>
      <link>https://mrmonk.dev/blog/notes/typescript/ts-generic-params/</link>
      <pubDate>Fri, 07 Jan 2022 11:00:00 +0100</pubDate>
      
      <guid>https://mrmonk.dev/blog/notes/typescript/ts-generic-params/</guid>
      <description>the challenge interface MyInterface { key1: number; key2: string; }  So for example we have the following setup. We have a Typescript interface and object implementing this interface and a function we pass the object and a key, which indicates the field of the object we want to manipulate.
As goodie we also get for that is type completion in VSC. So we get suggestions deppending on the type the object hast.</description>
    </item>
    
    <item>
      <title>typing eventhandler in typescript</title>
      <link>https://mrmonk.dev/blog/notes/typescript/ts-eventhandler/</link>
      <pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mrmonk.dev/blog/notes/typescript/ts-eventhandler/</guid>
      <description>I came across this issue when I made a type definition file for the upcoming web-ble functionalities in chrome and edge browser (more about it).
the challenge The challenge is the following:
 there are n-events we can register to trough a function addEventhandler in the callback we get data back depending on the event we register to, we expect a typed callback  untyped example:
MyObject.addEventhandler(&amp;quot;eventA&amp;quot;, myCallback, options); function myCallback(event: any) { // do something here }  solution mapped types Mapping Types are great if we want determine the type based on a single key.</description>
    </item>
    
    <item>
      <title>setting up debugging with node and typescript in visual studio code</title>
      <link>https://mrmonk.dev/blog/notes/typescript/ts-debug-vsc/</link>
      <pubDate>Fri, 15 Oct 2021 19:23:49 +0100</pubDate>
      
      <guid>https://mrmonk.dev/blog/notes/typescript/ts-debug-vsc/</guid>
      <description>the problem Offical Solution from visual studio code homepage for setting up debugging:
{ &amp;quot;name&amp;quot;: &amp;quot;Launch Server&amp;quot;, &amp;quot;program&amp;quot;: &amp;quot;${workspaceFolder}/src/index.ts&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;node&amp;quot;, &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;, &amp;quot;skipFiles&amp;quot;: [&amp;quot;&amp;lt;node_internals&amp;gt;/**&amp;quot;], &amp;quot;preLaunchTask&amp;quot;: &amp;quot;tsc: build - tsconfig.json&amp;quot;, &amp;quot;outFiles&amp;quot;: [&amp;quot;${workspaceFolder}/build/**/*.js&amp;quot;] }  and add in tsconfig.json:
{ ... &amp;quot;sourceMap&amp;quot;: true, ... }  This works, but brings one problem to the front: Exceptions. The exception thrown will refrence to the compiled javascript code. So we have to lookup the causing source file by our selfs.</description>
    </item>
    
    <item>
      <title>powerbi: handling iso weeks</title>
      <link>https://mrmonk.dev/blog/powerbi/powerbi-iso-weeks/</link>
      <pubDate>Sun, 25 Apr 2021 12:00:00 +0200</pubDate>
      
      <guid>https://mrmonk.dev/blog/powerbi/powerbi-iso-weeks/</guid>
      <description>There are some twist to keep in mind, when working with ISO calendar weeks. The first week of the year is defi
formulars formular for ISO calendar week
WEEKNUM(data[&amp;quot;timestamp&amp;quot;], 21)  Hint: The parameter 21 is not always documented for PowerBi depending on the source.
formular for ISO year
For grouping we need to know to which year a calendar week belongs. It could be that the last week lays in the new year but for aggregation purpose these week counts to the previous year.</description>
    </item>
    
    <item>
      <title>arduino: how to use the serial plotter of the Arduino IDE</title>
      <link>https://mrmonk.dev/blog/arduino/arduino-ide-serial-plotter/</link>
      <pubDate>Thu, 25 Feb 2021 12:00:00 +0200</pubDate>
      
      <guid>https://mrmonk.dev/blog/arduino/arduino-ide-serial-plotter/</guid>
      <description>labeling the series If you have to print some debug messages in the beginning, the Serial Plotter will interpret these as Series Labels. To clear unneacessary labels, just restart the serial plotter (not the mc). In order to catch up the labels, you have to print them to Serial everytime you print values. So it is garanted that the series labels are recognized.
As seperators you can use a tabulator, a space or a comma.</description>
    </item>
    
    <item>
      <title>mongo fixing broken timestamps</title>
      <link>https://mrmonk.dev/blog/mongo/mongo-fixing-stuff/</link>
      <pubDate>Mon, 02 Nov 2020 12:00:00 +0200</pubDate>
      
      <guid>https://mrmonk.dev/blog/mongo/mongo-fixing-stuff/</guid>
      <description>convert bson timestamp to date So I&amp;rsquo;m used to create a timestamp for logging in the db when something is created. What should go wrong with using mongo bson timestamp. Let me say it this way. As long as you leave it alone in the database it will happily coexist with all the other stuff.
But if you want to use it in javascript it gets complicated.
What is a timestamp in bson</description>
    </item>
    
    <item>
      <title>make ftp working with ssh without changing permissions</title>
      <link>https://mrmonk.dev/blog/notes/ftp-without-chmod/</link>
      <pubDate>Tue, 01 Sep 2020 12:00:00 +0200</pubDate>
      
      <guid>https://mrmonk.dev/blog/notes/ftp-without-chmod/</guid>
      <description>the problem If you want to disable your root user of the maschine being accessed via SSH you probably ran into Problems with SFTP on your server. As long you use the root user of the maschine your SFTP will work fine, but if you change your user you will get into trouble.
I&amp;rsquo;m working a lot with docker and bind mounts for config files so I can&amp;rsquo;t change the owner/permission of the directory or file I&amp;rsquo;m binding to.</description>
    </item>
    
  </channel>
</rss>