<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ts on moench.dev</title>
    <link>https://mrmonk.dev/tags/ts/</link>
    <description>Recent content in ts on moench.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© {year}</copyright>
    <lastBuildDate>Fri, 07 Jan 2022 11:00:00 +0100</lastBuildDate>
    
	<atom:link href="https://mrmonk.dev/tags/ts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>using generic params in typescript</title>
      <link>https://mrmonk.dev/blog/notes/typescript/ts-generic-params/</link>
      <pubDate>Fri, 07 Jan 2022 11:00:00 +0100</pubDate>
      
      <guid>https://mrmonk.dev/blog/notes/typescript/ts-generic-params/</guid>
      <description>the challenge interface MyInterface { key1: number; key2: string; }  So for example we have the following setup. We have a Typescript interface and object implementing this interface and a function we pass the object and a key, which indicates the field of the object we want to manipulate.
As goodie we also get for that is type completion in VSC. So we get suggestions deppending on the type the object hast.</description>
    </item>
    
    <item>
      <title>typing eventhandler in typescript</title>
      <link>https://mrmonk.dev/blog/notes/typescript/ts-eventhandler/</link>
      <pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mrmonk.dev/blog/notes/typescript/ts-eventhandler/</guid>
      <description>I came across this issue when I made a type definition file for the upcoming web-ble functionalities in chrome and edge browser (more about it).
the challenge The challenge is the following:
 there are n-events we can register to trough a function addEventhandler in the callback we get data back depending on the event we register to, we expect a typed callback  untyped example:
MyObject.addEventhandler(&amp;quot;eventA&amp;quot;, myCallback, options); function myCallback(event: any) { // do something here }  solution mapped types Mapping Types are great if we want determine the type based on a single key.</description>
    </item>
    
    <item>
      <title>setting up debugging with node and typescript in visual studio code</title>
      <link>https://mrmonk.dev/blog/notes/typescript/ts-debug-vsc/</link>
      <pubDate>Fri, 15 Oct 2021 19:23:49 +0100</pubDate>
      
      <guid>https://mrmonk.dev/blog/notes/typescript/ts-debug-vsc/</guid>
      <description>the problem Offical Solution from visual studio code homepage for setting up debugging:
{ &amp;quot;name&amp;quot;: &amp;quot;Launch Server&amp;quot;, &amp;quot;program&amp;quot;: &amp;quot;${workspaceFolder}/src/index.ts&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;node&amp;quot;, &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;, &amp;quot;skipFiles&amp;quot;: [&amp;quot;&amp;lt;node_internals&amp;gt;/**&amp;quot;], &amp;quot;preLaunchTask&amp;quot;: &amp;quot;tsc: build - tsconfig.json&amp;quot;, &amp;quot;outFiles&amp;quot;: [&amp;quot;${workspaceFolder}/build/**/*.js&amp;quot;] }  and add in tsconfig.json:
{ ... &amp;quot;sourceMap&amp;quot;: true, ... }  This works, but brings one problem to the front: Exceptions. The exception thrown will refrence to the compiled javascript code. So we have to lookup the causing source file by our selfs.</description>
    </item>
    
  </channel>
</rss>